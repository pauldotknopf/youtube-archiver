@model TopicModel

@section navbarSecondary
{
    @await Html.PartialAsync("_ChannelHeader", Model.Videos[0].Video.Channel)
}

<div class="container">
    <div class="topic">
        <h1 class="topic-title">@Model.Topic</h1>
        @if (Model.Videos.Count == 0)
        {
            <p>No results were found.</p>
        }
        @foreach (var video in Model.Videos.OrderByDescending(x => x.Video.Video.UploadedOn))
        {
            <div class="video">
                <h2 class="video-title">
                    @if (video.Video.Video.Deleted)
                    {
                        <span class="badge badge-danger">deleted</span>
                    }<a href="@Url.Content($"~/video/{video.Video.Video.Id}")">@video.Video.Video.Title</a>
                </h2>
                <p class="video-submitted">
                    uploaded on @(video.Video.Video.UploadedOn.HasValue ? video.Video.Video.UploadedOn.Value.ToString("MMM dd, yyyy") : "(unknown)")
                </p>
                <div class="video-segments">
                    @foreach (var segment in video.Segments)
                    {
                        <div class="video-segment">
                            <a href="~/video/@video.Video.Video.Id?t=@(segment.Location)">@@@segment.FriendlyLocation</a> @Html.Raw(segment.Text)
                        </div>
                    }
                </div>
            </div>
        }
    </div>
</div>